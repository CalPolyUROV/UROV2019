controller.py: 51:	 # TODO: Investigate changing this behavior
controller.py: 67:	 # TODO: Investigate whether this part of the loop is necessary
controller.py: 126:	 # TODO: provide specific data types for relevent keys
main.py: 45:	 # TODO: Send termination signal to robot from server when closing
robot_data.py: 11:	 Senors TODO:
robot_data.py: 18:	 Inputs TODO:
robot_data.py: 62:	 # TODO: Investigate changing this behavior
serial_coms.py: 3:	TODO: Add more documentation here
serial_coms.py: 24:	# TODO: Move list to external file (maybe .txt or .csv),
serial_coms.py: 67:	 # TODO: Handle aborting program in Schedule in order to correctly terminate connections, etc.
serial_coms.py: 169:	 # TODO: Add logic to retry this a few times
serial_finder.py: 3:	# TODO: Find the origin of this code and give credit
serial_packet.py: 6:	# TODO: verify checksums, probably in read_packet()
serial_packet.py: 74:	 # TODO: Make this better, but it must match on this and the Arduino/Teensy. (Maybe CRC32 or a smaller variant)
settings.py: 4:	# TODO: Investigate converting settings values to a dict
settings.py: 37:	USE_CONTROLLER = True # TODO: Use this value
settings.py: 38:	REQUIRE_CONTROLLER = True # TODO: Use this value
settings.py: 39:	SIMULATE_INPUT = False # TODO: Use this value
settings.py: 93:	# TODO: track debugging for server and client separately
snr.py: 173:	 # TODO: intelligently insert normal priority tasks after any high priority tasks, but before low priority tasks
snr.py: 190:	 # TODO: Send commands to Teensy (In final commands will come from sockets connection OR event loop will get updated values in an RTOS manner)
snr.py: 191:	 # TODO: Write logic choosing a command to send (maybe use a queue)
snr.py: 214:	 # TODO: possibly call get_new_tasks()
sockets_client.py: 35:	 # TODO: Handle aborting program in Schedule in order to correctly terminate connections, etc.
sockets_client.py: 69:	 # TODO: Handle aborting program in Schedule in order to correctly terminate connections, etc.
sockets_client.py: 130:	 # TODO: Handle loss of connection, attempt to recover
sockets_client.py: 141:	 # TODO: Correctly terminate this function here
sockets_server.py: 17:	 TODO: verify this
sockets_server.py: 45:	 # TODO: Investigate this magic int
topside.py: 21:	 # TODO: implement SNR schedule/Node in topside
topside.py: 24:	 # TODO: pass sockets server into Node/Schedule
topside.py: 26:	 # TODO: Remotely run client on robot
topside.py: 74:	 # TODO: Record and display telemetry data
topside.py: 91:	 # TODO: Take IP address and port as command line arg
utils.py: 20:	 # TODO: prevent use of this via a setting
utils.py: 31:	# TODO: Use settings.ROLE for per client and server debugging
utils.py: 63:	 # TODO: Output stuff to a log file
utils.py: 72:	# # TODO: Do this better
utils.py: 75:	# # TODO: Output stuff to a log file
utils.py: 91:	# TODO: Add logging to a specific file
utils.py: 96:	 # TODO: Implement logging to disk
utils.py: 101:	 # TODO: Implement formatted logging to disk
